<MudStack Direction="Row" Spacing="1">
    <MudNumericField T="int" Value="_amount" ValueChanged="OnAmountChanged" Label="Amount" Min="0" Immediate="true" />
    <MudSelect T="string" Value="_unit" ValueChanged="OnUnitChanged" Label="Unit">
        <MudSelectItem T="string" Value="Minutes">Minutes</MudSelectItem>
        <MudSelectItem T="string" Value="Hours">Hours</MudSelectItem>
        <MudSelectItem T="string" Value="Days">Days</MudSelectItem>
    </MudSelect>
</MudStack>

@code {
    private int _amount;
    private string _unit = "Minutes";
    private string? _lastValue;

    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }

    protected override void OnInitialized()
    {
        UpdateFromValue();
        _lastValue = Value;
    }

    protected override void OnParametersSet()
    {
        if (_lastValue != Value)
        {
            _lastValue = Value;
            UpdateFromValue();
        }
    }

    private void UpdateFromValue()
    {
        if (Value != null && TimeSpan.TryParse(Value, out var ts))
        {
            if (ts.TotalDays >= 1 && ts.TotalDays % 1 == 0)
            {
                _unit = "Days";
                _amount = (int)ts.TotalDays;
            }
            else if (ts.TotalHours >= 1 && ts.TotalHours % 1 == 0)
            {
                _unit = "Hours";
                _amount = (int)ts.TotalHours;
            }
            else
            {
                _unit = "Minutes";
                _amount = (int)ts.TotalMinutes;
            }
        }
        else
        {
            _unit = "Minutes";
            _amount = 0;
        }
    }

    private Task OnAmountChanged(int value)
    {
        _amount = value;
        return UpdateValue();
    }

    private Task OnUnitChanged(string value)
    {
        _unit = value;
        return UpdateValue();
    }

    private Task UpdateValue()
    {
        var ts = _unit switch
        {
            "Minutes" => TimeSpan.FromMinutes(_amount),
            "Hours" => TimeSpan.FromHours(_amount),
            "Days" => TimeSpan.FromDays(_amount),
            _ => TimeSpan.Zero
        };
        Value = ts.ToString();
        _lastValue = Value;
        return ValueChanged.InvokeAsync(Value);
    }
}
