@using System.Linq
@using System.Text.Json
@using BlazorWorkflowUI.Models
@using Microsoft.AspNetCore.Components.Forms

<MudStack Class="workflow-diagram" AlignItems="AlignItems.Center" Spacing="2">
    <MudPaper Class="activity-box p-4">
        <MudSelect T="string" @bind-Value="Workflow.Trigger.ActivityType" Label="Trigger" Dense="true">
            @foreach (var option in TriggerOptions)
            {
                <MudSelectItem T="string" Value="@option">@option</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="string" @bind-Value="Workflow.Trigger.Condition" Label="Condition" Dense="true">
            @foreach (var option in ConditionOptions)
            {
                <MudSelectItem T="string" Value="@option">@option</MudSelectItem>
            }
        </MudSelect>
    </MudPaper>
    @foreach (var step in Workflow.Steps)
    {
        <MudIcon Icon="@Icons.Material.Filled.ArrowDownward" Class="arrow" />
        <MudPaper Class="activity-box p-4">
            <MudSelect T="string" @bind-Value="step.ActivityType" Dense="true">
                @foreach (var option in ActivityOptions)
                {
                    <MudSelectItem T="string" Value="@option">@option</MudSelectItem>
                }
                <MudSelectItem T="string" Value="Delay">Delay</MudSelectItem>
                <MudSelectItem T="string" Value="Condition">Condition</MudSelectItem>
            </MudSelect>

            @if (step.ActivityType == "Delay")
            {
                <MudNumericField T="int?" Value="GetIntParam(step, \"Seconds\")" ValueChanged="v => SetParam(step, \"Seconds\", v)" Label="Seconds" Dense="true" />
            }
            else if (step.ActivityType == "Condition")
            {
                <MudSelect T="string" Value="GetStringParam(step, \"Condition\")" ValueChanged="v => SetParam(step, \"Condition\", v)" Dense="true">
                    @foreach (var option in ConditionOptions)
                    {
                        <MudSelectItem T="string" Value="@option">@option</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect T="string" @bind-Value="step.NextStepId" Label="Match" Dense="true">
                    <MudSelectItem T="string" Value="@null">End</MudSelectItem>
                    @foreach (var option in Workflow.Steps.Where(s => s.Id != step.Id))
                    {
                        <MudSelectItem T="string" Value="@option.Id">@GetStepLabel(option)</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect T="string" @bind-Value="step.ElseNextStepId" Label="No Match" Dense="true">
                    <MudSelectItem T="string" Value="@null">End</MudSelectItem>
                    @foreach (var option in Workflow.Steps.Where(s => s.Id != step.Id))
                    {
                        <MudSelectItem T="string" Value="@option.Id">@GetStepLabel(option)</MudSelectItem>
                    }
                </MudSelect>
            }
            else
            {
                <MudTextField T="string" Value="GetStringParam(step, \"Text\")" ValueChanged="v => SetParam(step, \"Text\", v)" Label="Text" Lines="3" Dense="true" />
                <InputFile OnChange="@(e => UploadFiles(e, step))" multiple accept="application/pdf,image/*,video/*,audio/*" />
                @if (step.Attachments.Any())
                {
                    <ul class="attachment-list">
                        @foreach (var file in step.Attachments)
                        {
                            <li>@file.FileName <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="@(() => RemoveFile(step, file))" /></li>
                        }
                    </ul>
                }
                <MudSelect T="string" @bind-Value="step.NextStepId" Label="Next Step" Dense="true">
                    <MudSelectItem T="string" Value="@null">End</MudSelectItem>
                    @foreach (var option in Workflow.Steps.Where(s => s.Id != step.Id))
                    {
                        <MudSelectItem T="string" Value="@option.Id">@GetStepLabel(option)</MudSelectItem>
                    }
                </MudSelect>
            }
            <MudButton Variant="Variant.Text" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="@(() => RemoveStep(step))">Remove Step</MudButton>
        </MudPaper>
    }
    <MudIcon Icon="@Icons.Material.Filled.ArrowDownward" Class="arrow" />
    <MudButton OnClick="AddStep" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add">Add Step</MudButton>
</MudStack>

<style>
.workflow-diagram {
    display: flex;
    flex-direction: column;
    align-items: center;
}
.activity-box {
    min-width: 200px;
    text-align: center;
}
.arrow {
    font-size: 24px;
}
.attachment-list {
    list-style-type: none;
    padding-left: 0;
    margin-top: 4px;
}
.attachment-list li {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 4px;
}
</style>

@code {
    [Parameter]
    public WorkflowModel Workflow { get; set; } = new();

    [Parameter]
    public List<string> ActivityOptions { get; set; } = new();

    [Parameter]
    public List<string> ConditionOptions { get; set; } = new();

    [Parameter]
    public List<string> TriggerOptions { get; set; } = new();

    string GetStepLabel(StepModel step) => $"{Workflow.Steps.IndexOf(step) + 1}: {step.ActivityType}";

    int? GetIntParam(StepModel step, string key)
    {
        if (step.Parameters.TryGetValue(key, out var value))
        {
            if (value is JsonElement je && je.ValueKind == JsonValueKind.Number)
                return je.GetInt32();
            if (value is int i)
                return i;
            if (int.TryParse(value?.ToString(), out var parsed))
                return parsed;
        }
        return null;
    }

    string? GetStringParam(StepModel step, string key)
    {
        if (step.Parameters.TryGetValue(key, out var value))
        {
            if (value is JsonElement je && je.ValueKind == JsonValueKind.String)
                return je.GetString();
            return value?.ToString();
        }
        return null;
    }

    void SetParam(StepModel step, string key, object? value)
    {
        if (value == null)
            step.Parameters.Remove(key);
        else
            step.Parameters[key] = value;
    }

    void AddStep()
    {
        var newStep = new StepModel();
        if (Workflow.Steps.Any())
        {
            var last = Workflow.Steps[^1];
            if (last.ActivityType == "Condition")
            {
                if (string.IsNullOrEmpty(last.NextStepId))
                    last.NextStepId = newStep.Id;
                else if (string.IsNullOrEmpty(last.ElseNextStepId))
                    last.ElseNextStepId = newStep.Id;
            }
            else
            {
                last.NextStepId = newStep.Id;
            }
        }
        Workflow.Steps.Add(newStep);
    }

    void RemoveStep(StepModel step)
    {
        Workflow.Steps.Remove(step);
        foreach (var s in Workflow.Steps)
        {
            if (s.NextStepId == step.Id)
                s.NextStepId = null;
            if (s.ElseNextStepId == step.Id)
                s.ElseNextStepId = null;
        }
    }

    async Task UploadFiles(InputFileChangeEventArgs e, StepModel step)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream(10_000_000).ReadAsync(buffer);
            step.Attachments.Add(new StepAttachmentModel
            {
                FileName = file.Name,
                ContentType = file.ContentType,
                Data = buffer
            });
        }
    }

    void RemoveFile(StepModel step, StepAttachmentModel file)
    {
        step.Attachments.Remove(file);
    }
}
