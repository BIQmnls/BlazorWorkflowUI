@using System.Linq
@using BlazorWorkflowUI.Models

<div class="workflow-diagram">
    <div class="activity-box">
        <MudSelect T="string" @bind-Value="Workflow.Trigger.ActivityType" Label="Trigger" Dense="true">
            @foreach (var option in TriggerOptions)
            {
                <MudSelectItem T="string" Value="@option">@option</MudSelectItem>
            }
        </MudSelect>
    </div>
    @foreach (var step in Workflow.Steps)
    {
        <div class="arrow">&#8595;</div>
        if (step.ElseActivityType != null)
        {
            <div class="activity-box">
                <MudSelect T="string" @bind-Value="step.Condition" Dense="true">
                    @foreach (var option in ConditionOptions)
                    {
                        <MudSelectItem T="string" Value="@option">@option</MudSelectItem>
                    }
                </MudSelect>
            </div>
            <div class="branches">
                <div class="branch">
                    <div class="arrow">&#8601;</div>
                    <div class="branch-label">Match</div>
                    <div class="activity-box">
                        <MudSelect T="string" @bind-Value="step.ActivityType" Dense="true">
                            @foreach (var option in ActivityOptions)
                            {
                                <MudSelectItem T="string" Value="@option">@option</MudSelectItem>
                            }
                        </MudSelect>
                        @if (step.ActivityType == "WaitForDocuments")
                        {
                            <MudNumericField T="int?" @bind-Value="step.DelaySeconds" Label="Seconds" Dense="true" />
                        }
                    </div>
                </div>
                <div class="branch">
                    <div class="arrow">&#8600;</div>
                    <div class="branch-label">No Match</div>
                    <div class="activity-box">
                        <MudSelect T="string" @bind-Value="step.ElseActivityType" Dense="true">
                            <MudSelectItem T="string" Value="@null">None</MudSelectItem>
                            @foreach (var option in ActivityOptions)
                            {
                                <MudSelectItem T="string" Value="@option">@option</MudSelectItem>
                            }
                        </MudSelect>
                        @if (step.ElseActivityType == "WaitForDocuments")
                        {
                            <MudNumericField T="int?" @bind-Value="step.ElseDelaySeconds" Label="Seconds" Dense="true" />
                        }
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="activity-box">
                <MudSelect T="string" @bind-Value="step.Condition" Dense="true">
                    @foreach (var option in ConditionOptions)
                    {
                        <MudSelectItem T="string" Value="@option">@option</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect T="string" @bind-Value="step.ActivityType" Dense="true">
                    @foreach (var option in ActivityOptions)
                    {
                        <MudSelectItem T="string" Value="@option">@option</MudSelectItem>
                    }
                </MudSelect>
                @if (step.ActivityType == "WaitForDocuments")
                {
                    <MudNumericField T="int?" @bind-Value="step.DelaySeconds" Label="Seconds" Dense="true" />
                }
                <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add" OnClick="@(() => step.ElseActivityType = ActivityOptions.First())">
                    Add Branch
                </MudButton>
            </div>
        }
    }
    <div class="arrow">&#8595;</div>
    <MudButton OnClick="AddStep" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add">Add Step</MudButton>
</div>

<style>
.workflow-diagram {
    display: flex;
    flex-direction: column;
    align-items: center;
}
.activity-box {
    border: 1px solid #ccc;
    padding: 8px;
    margin: 4px;
    border-radius: 4px;
    background-color: #f9f9f9;
    min-width: 200px;
    text-align: center;
}
.arrow {
    font-size: 24px;
}
.branches {
    display: flex;
    justify-content: center;
    gap: 20px;
}
.branch {
    display: flex;
    flex-direction: column;
    align-items: center;
}
.branch-label {
    font-size: 0.8em;
    color: #666;
    margin-bottom: 2px;
}
.details {
    font-size: 0.8em;
    color: #666;
}
</style>

@code {
    [Parameter]
    public WorkflowModel Workflow { get; set; } = new();

    [Parameter]
    public List<string> ActivityOptions { get; set; } = new();

    [Parameter]
    public List<string> ConditionOptions { get; set; } = new();

    [Parameter]
    public List<string> TriggerOptions { get; set; } = new();

    void AddStep() => Workflow.Steps.Add(new StepModel());
}

