@page "/"

@inject IWorkflowService WorkflowService
@inject ISnackbar Snackbar

<MudContainer Class="pa-4 mx-auto my-4" >
    <MudText Typo="Typo.h4" Class="mb-2">Workflow Builder</MudText>
    <MudText Class="mb-4">Enter a workflow name, configure the steps below, then save or load your workflow.</MudText>
    <MudTextField T="string" @bind-Value="_workflow.Name" Label="Workflow Name" Variant="Variant.Filled" Class="mb-3" />
    <MudDivider Class="mb-4" />
    <SimpleWorkflowDiagram Workflow="_workflow" ActivityOptions="_activityOptions" ConditionOptions="_conditionOptions" TriggerOptions="_triggerOptions" />
    <MudDivider Class="mb-4" />
    <MudStack Direction="Row" Spacing="1" Class="mb-2">
        <MudButton OnClick="Save" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save">Save</MudButton>
        <MudButton OnClick="Load" Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.FolderOpen">Load</MudButton>
    </MudStack>
</MudContainer>

@code {
    protected WorkflowModel _workflow = new();

    protected string? _json;
    private readonly List<string> _triggerOptions = new() { "PolicyCreated", "PremiumDue", "MortgageApplicationSubmitted" };
    private readonly List<string> _activityOptions = new() { "SendPolicyDocument", "EvaluateMortgageApplication" };
    private readonly List<string> _conditionOptions = new() { "NoCondition", "PolicyActive", "LoanApproved" };

    void Generate()
    {
        _json = WorkflowService.GenerateJson(_workflow);
    }

    void Save()
    {
        WorkflowService.Save(_workflow);
        Snackbar.Add("Workflow saved", Severity.Success);
    }

    void Load()
    {
        var loaded = WorkflowService.Load(_workflow.Name);
        if (loaded is not null)
        {
            _workflow = loaded;
            Snackbar.Add("Workflow loaded", Severity.Info);
        }
        else
        {
            Snackbar.Add("Workflow not found", Severity.Error);
        }
    }
}
